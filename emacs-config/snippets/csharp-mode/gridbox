${1:var grid=} new GridBox<${2:string}>(
	       ${3:colNum}, ${4:rowNum},
	       ${5:gridWidth}, ${6:gridHeight},
	       
	       //callback: draw background
	       (GridBox<$2> grid, Rect rcBG) =>
		       {
			   this.drawRect(new Rect(0, 0, grid.EntryNum * grid.GridWidth, rcBG.height), Color.blue);
			   for (int i = 0; i < grid.EntryNum; i++)
			   {
			       this.drawVLine(Color.green, 0.5f,
					      new Vector2(rcBG.x + (i + 1) * grid.GridWidth, rcBG.y),
					      new Vector2(rcBG.x + (i + 1) * grid.GridWidth, rcBG.height));
			   }
			   this.restore_gui_color();
		       },

	       //callback: draw grid
	       (GridBox<$2> grid, int index, Rect rcGrid, bool is_selected) =>
		   {
		       if (is_selected)
		       {
			   this.set_gui_color(Color.red);
			   this.drawRect(rcGrid, Color.red);
			   //GUI.Label(rcGrid, grid.GetEntry(index));
			   //GUI.Button(rcGrid, grid.GetEntry(index));
			   //GUI.DrawTexture(rcGrid, EditorGUIUtility.whiteTexture);
		       }
		       else
		       {
			   this.set_gui_color(Color.green);

			   //GUI.Label(rcGrid, grid.GetEntry(index));
			   //GUI.Box(rcGrid, "00");
			   //GUI.Label(rcGrid, grid.GetEntry(index));
		       }
		       this.drawVLine(Color.green, 0.5f, new Vector2(rcGrid.x + rcGrid.width, rcGrid.y),
		       				   new Vector2(rcGrid.x + rcGrid.width, rcGrid.height));
		       this.restore_gui_color();
		   },
		   
	       //callback: click event
	       (GridBox<$2> grid, int index, int old_index, int count) =>
		   {
		       // this.OpenFile(this.list.GetEntry(index));
		       //Debug.Log(index.ToString());
		   });
