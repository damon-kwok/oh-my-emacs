/*
Module: ${1:Example$(capitalize yas-text)}
Class:  ${2:Person$(capitalize yas-text)}
*/
#include "${1:$(downcase yas-text)}-${2:$(downcase yas-text)}.h"

struct _${1:$(capitalize yas-text)}${2:$(capitalize yas-text)}
{
  GObject parent_object;

  gchar *name;
};
$0
/* This declares typedef struct _${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} ${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} */
G_DEFINE_TYPE (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)}, ${1:$(downcase yas-text)}_${2:$(downcase yas-text)}, G_TYPE_OBJECT);

enum
{
  PROP_0,
  PROP_NAME,
  PROP_LAST
};

static void
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_get_property (GObject *object,
                             guint prop_id,
                             GValue *value,
                             GParamSpec *properties)
{
  ${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *self = (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *) object;

  switch (prop_id)
    {
    case PROP_NAME:
      g_value_set_string (value, ${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_get_name (self));
      break;
    }
}

static void
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_set_property (GObject *object,
                             guint prop_id,
                             const GValue *value,
                             GParamSpec *properties)
{
  ${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *self = (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *) object;

  switch (prop_id)
    {
    case PROP_NAME:
      ${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_set_name (self, g_value_get_string (value));
      break;
    }
}

static GParamSpec *properties [PROP_LAST];

/* class initializer, called only once */
static void
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_class_init (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)}Class *klass)
{
  GObjectClass *object_class = G_OBJECT_CLASS (klass);

  object_class->get_property = ${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_get_property;
  object_class->set_property = ${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_set_property;

  properties [PROP_NAME] =
    g_param_spec_string ("name",
                         "Name",
                         "${1:$(upcase yas-text)} ${2:$(upcase yas-text)}'s name",
                         NULL,
                         (G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));

  g_object_class_install_properties (object_class, PROP_LAST, properties);
}

/* instance initializer */
static void
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_init (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *self)
{
  self->name = g_strdup ("");
}

const gchar *
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_get_name (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *self)
{
  return self->name;
}

void
${1:$(downcase yas-text)}_${2:$(downcase yas-text)}_set_name (${1:$(capitalize yas-text)}${2:$(capitalize yas-text)} *self,
                         const gchar *name)
{
  if (g_strcmp0 (self->name, name) != 0)
    {
      g_free (self->name);
      self->name = g_strdup (name);
    }
}