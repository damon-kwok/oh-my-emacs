#!/usr/bin/env bash

function ask() {
    read -p $(tput setaf 5)"$1 "$(tput sgr0)
}
function warning-ask() {
    read -p $(tput setaf 3)"$1 "$(tput sgr0)
}

function echo-success() {
    echo -e $(tput setaf 10)"$1"$(tput sgr0) #2
}
function echo-warning() {
    echo -e $(tput setaf 11)"$1"$(tput sgr0) #3 dark yellow
}
function echo-error() {
    echo -e $(tput setaf 1)"$1"$(tput sgr0)
}
function echo-tip() {
    echo -e $(tput setaf 14)"$1"$(tput sgr0) #6
}
function echo-debug() {
    echo -e $(tput setaf 8)"$1"$(tput sgr0)
}
function echo-waiting() {
    echo -e $(tput setaf 4)"$1"$(tput sgr0)
}

function echo-kv() {
    echo -e $(tput setaf 14)"$1:"$(tput sgr0) $(tput setaf 10)"$2"$(tput sgr0)
}

function title() {
    echo -e $(tput setaf 14)"=================================================================="\
	 $(tput sgr0)
    echo -e $(tput setaf 14)"= $1:"$(tput sgr0)
}

function tip() {
    echo -e $(tput setaf 10)"--------------------------------"$(tput sgr0)
    echo -e $(tput setaf 10)"-- $1:"$(tput sgr0)
}

function git-upgrade() {
    echo-tip "$*"
    local curdir=`pwd`
    local site=$1
    local project=$2
    local dir=$3
    local submodule=$4
    if [ ! -n "$5" ]; then
        local branch=""
    else
        local branch="-b $5"
    fi    
    local url="$site/${project}.git"
    
    if [ ! -d $dir ] || [ ! -e "$dir/.git/index" ]; then
	tip "clone $project"
        echo-success "git clone $url $dir --single-branch --depth=1 $branch"
	git clone $url $dir --single-branch --depth=1 $branch
    else
	cd $dir
	tip "update $project"
        echo-success "git pull"
	git pull
    fi
    cd $dir
    # git submodule foreach --recursive 'git fetch --tags'
    
    if [ "$submodule" != "0" ]; then
        # echo-success "git submodule update --init --depth=1"
	# git submodule update --init --depth=1
        echo-success "git submodule update --init"
	git submodule update --init
    fi
    
    cd $curdir
}

function github-ssh-upgrade() {
    echo-tip "$*"
    local curdir=`pwd`
    local project=$1
    local dir=$2
    local submodule=$3    
    if [ ! -n "$4" ] ; then
        local branch=""
    else
        local branch="-b $4"
    fi
    
    local url="git@github.com:${project}.git"
    
    if [ ! -d $dir ] || [ ! -e "$dir/.git/index" ]; then
	tip "clone $project"
        echo-success "git clone $url $dir --single-branch --depth=1 $branch"
	git clone $url $dir --single-branch --depth=1 $branch
    else
	cd $dir
	tip "update $project"
        echo-success "git pull"
	git pull
    fi
    cd $dir
    # git submodule foreach --recursive 'git fetch --tags'
    
    if [ "$submodule" != "0" ]; then
        echo-success "git submodule update --init"
	git submodule update --init
    fi
    
    cd $curdir
}

function github-upgrade() {
    local curdir=`pwd`
    local site="https://github.com"
    local project=$1
    local dir=$2
    local submodule=$3
    local branch=$4

    git-upgrade $site $project $dir $submodule $branch
}

function git-complete-upgrade() {
    git fetch --unshallow origin
}

function svn-upgrade() {
    local url=$1
    local dir=$2
    # svn co svn://www.svn999.com/guowangwei.workspace workspace
    
    if [ ! -d $DIR_WORKSPACE ]; then
	cd $OME_ROOT
	svn co $url $dir
    else
	cd $dir
	svn cleanup .
	svn up
    fi
}

function svn-remove-lose() {
    svn status grep "^!" awk `{print $2}` xargs svn rm
}

function svn-add-new() {
    svn status grep "^\?" awk `{print $2}` xargs svn add
}

function svn-commit() {
    svn-remove-lose
    svn-add-new
    
    svn status
    readp "auto commit?"
    if [ $? -eq 1 ]; then
        svn commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
        read -p "please enter commit message:" msg
        svn commit -m "$msg"
    fi
    # set msg=%date:~0,4%-%date:~5,2%-%date:~8,2%@%time:~0,2%-%time:~3,2%-%time:~6,2%
    svn commit -m "%msg%"
}

function readp {
    local str=$1
    
    read -p "$str(Y/n)" c
    if [ "$c" == "y" ] || [ "$c" == "Y" ] || [ "$c" == "" ]; then
	return $(( 1 ));
    elif [ "$c" == "n" ] || [ "$c" == "N" ]; then
	return $(( 0 ));
    else
	echo "invalid input:$c"
	readp "$1"
    fi
}

# find-str $2:str $1:file
# example:
# find-str "/opt/ros/kinetic/" ~/.bashrc
# result=$?
# echo $result
function find-str() {
    local str=$1
    local file=$2
    
    grep $str $file >/dev/null
    
    if [ $? -eq 0 ]; then
	# echo "found:$str"
	return $(( 1 ));
    else
	# echo "not found:$str"
	return $(( 0 ));
    fi
}

function auto-gen-cmakefile() {
    local projdir=$1
    echo $1
    if [ ! -f "$projdir/CMakeLists.txt" ]; then
        echo "cmake_minimum_required(VERSION 3.2)" >> $projdir/CMakeLists.txt
        echo "project(libexample)" >> $projdir/CMakeLists.txt
        
        echo "" >> $projdir/CMakeLists.txt
        echo "if (UNIX)" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_COMPILER             \"clang\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS                \"-Wall -std=gnu89\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_DEBUG          \"-g\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_MINSIZEREL     \"-Os -DNDEBUG\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_RELEASE        \"-O4 -DNDEBUG\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_C_FLAGS_RELWITHDEBINFO \"-O2 -g\")" >> $projdir/CMakeLists.txt
        
        echo "" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_COMPILER             \"clang++\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS                \"-Wall -std=gnu++11\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_DEBUG          \"-g\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_MINSIZEREL     \"-Os -DNDEBUG\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_RELEASE        \"-O4 -DNDEBUG\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-O2 -g\")" >> $projdir/CMakeLists.txt
        
        echo "" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_AR      \"llvm-ar\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_LINKER  \"llvm-ld\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_NM      \"llvm-nm\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_OBJDUMP \"llvm-objdump\")" >> $projdir/CMakeLists.txt
        echo "SET (CMAKE_RANLIB  \"llvm-ranlib\")" >> $projdir/CMakeLists.txt
        
        echo "" >> $projdir/CMakeLists.txt
        echo "# set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -stdlib=libc++\")" >> $projdir/CMakeLists.txt
        # -I/usr/include/libcxxabi
        echo "# set(CMAKE_LINKER_FLAGS \"\${CMAKE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")" >> $projdir/CMakeLists.txt
        echo "endif(UNIX)" >> $projdir/CMakeLists.txt
        
        echo "" >> $projdir/CMakeLists.txt
        echo "set(ROOT \${CMAKE_CURRENT_LIST_DIR})" >> $projdir/CMakeLists.txt
        echo "" >> $projdir/CMakeLists.txt
        echo "# include_directories(\"\${ROOT}/Core/\")" >> $projdir/CMakeLists.txt
        echo "" >> $projdir/CMakeLists.txt
        echo "file(GLOB_RECURSE example_srcs *.h *.hh *i *.hpp *.c *.cc *.cpp)" >> $projdir/CMakeLists.txt
        echo "" >> $projdir/CMakeLists.txt
        echo "# target_sources(example PRIVATE \${example_srcs})" >> $projdir/CMakeLists.txt
        echo "# source_group(Source FILES \${example_srcs})" >> $projdir/CMakeLists.txt
        echo "" >> $projdir/CMakeLists.txt

        echo "add_library(pro_a STATIC \${example_srcs})" >> $projdir/CMakeLists.txt
        echo "# add_library(pro SHARED \${example_srcs})" >> $projdir/CMakeLists.txt
        echo "" >> $projdir/CMakeLists.txt
        echo "# add_executable(pro \${example_srcs})" >> $projdir/CMakeLists.txt
        echo "# target_link_libraries(pro pro_a)" >> $projdir/CMakeLists.txt
    fi
    mkdir -p $projdir/build
    cd $projdir/build/
    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
    cd $projdir
    ln -s build/compile_commands.json
}

function cmake-export-commands() {
    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
}

function auto-gen-rtags() {
    local projdir=$1
    auto-gen-cmakefile $projdir
    cd $projdir
    $RTAGS_BIN/rc -J .
}

# smart-rtags $void
function gen-rtags-impl() {
    local curdir=$1
    echo "curdir:$curdir"
    # if [ "/" != "$curdir" ]; then
    cd $curdir
    # if [ ! -d "$dir/rtags_indexes" ]; then
    echo "$dir/rtags_indexes is creating..."
    mkdir -p $curdir/.rtags_indexes
    cd $curdir/.rtags_indexes/
    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1
    $RTAGS_BIN/rc -J .
    cd ..
    # else
    # echo "$dir/rtags_indexes is exist!"
    # fi
    # fi
}
function auto-gen-rtags2() {
    local curdir=`pwd`
    # echo "check curdir:$curdir"
    if [ -f "$curdir/CMakeLists.txt" ]; then
	gen-rtags-impl $curdir 
    elif [ -f "$curdir/build/CMakeLists.txt" ]; then
	gen-rtags-impl $curdir/build
    elif [ -f "$curdir/Build/CMakeLists.txt" ]; then
	gen-rtags-impl
    elif [ -f "$curdir/cmake/CMakeLists.txt" ]; then
	gen-rtags-impl $curdir/cmake
    else
	cd ..
	if [ "/" != "$curdir" ]; then
	    auto-gen-rtags	    
	fi
    fi
}

function dns-upgrade() {
    local ip=$1
    
    tip "Add '$ip' to /etc/network/interfaces"
    find-str $ip /etc/network/interfaces
    if [ $? -eq 0 ]; then
	sudo bash -c "echo 'dns-nameservers  $ip' >> /etc/network/interfaces"
    else
	echo "skip!"
    fi
}

function host-upgrade() {
    local ip=$1
    local name=$2

    tip "Add '$ip $name' to /etc/hosts"
    find-str $name /etc/hosts
    if [ $? -eq 0 ]; then
	sudo bash -c "echo '$ip $name' >> /etc/hosts"
    else
	echo "skip!"
    fi
}

function apt-repo-upgrade() {
    local arch=$1
    local url=$2
    tip "Add docker apt repository"
    find-str "$url" /etc/apt/sources.list.d/additional-repositories.list
    if [ $? -eq 0 ]; then
	sudo add-apt-repository \
	     "deb [arch=$arch] $url xenial stable"
	sudo apt update
    fi
    # "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable"
}

function curdir-upgrade() {
    local src=$1
    local dst=$2

    if [ ! -d $dst ] || [ "$PULL_FOR_BUILD" == "1" ]; then
	rm -rf $dst
	cp -r $src $dst
	# cp -r $dir1/. $dir2
    fi	
}

function dir-search() {
    local str=$1
    grep -n $str -r .
}

function link-upgrade() {
    local src=$1
    local dst=$2

    rm -rf $dst
    ln -s $src $dst
}

function git-pull {
    tip "git-pull"    
    git reset
    git pull

    chmod +x $OME_ROOT/bin/*
}

function git-push {
    tip "git-push"    
    git reset
    git pull
    git add .
    git status

    readp "auto commit?"
    if [ $? -eq 1 ]; then
	git commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
	read -p "please enter commit message:" msg
	git commit -m "$msg"
    fi
    git push -u origin master
}

function git-push-a {
    tip "git-push-a"
    
    git reset
    git pull
    git add .
    git status
    # git commit -m "upgrade by "`uname -n`
    git commit -m `date +%Y-%m-%d@%H-%M-%S` # "upgrade by "`uname -n`
    git push -u origin master
}

function svn-remove-lose {
    # svn status grep "^!" awk '{print $2}' xargs svn rm
    svn st | grep '^\!' | cut -c 9- | xargs -r svn rm
    # --depth infinity
}

function svn-add-new {
    # svn status grep "^\?" awk '{print $2}' xargs svn add
    svn st | grep '^\?' | cut -c 9- | xargs -r svn add --depth infinity
}

function svn-cancel-add {
    # svn st |grep '^A' | cut -c 9- | awk '{print $2}' | xargs -r svn revert
    svn st | grep '^A' | cut -c 9- | xargs -r svn revert --depth infinity
}

function svn-commit {
    tip "check lose files"
    svn-remove-lose

    tip "check new files"
    svn-add-new

    tip "show status"
    svn status
    
    readp "auto commit?"
    if [ $? -eq 1 ]; then
	svn commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
	read -p "please enter commit message:" msg
	svn commit -m "$msg"
    fi
}

# check install:rtags irony-server
# function find-camke {
# echo 111
# }

# function kill-process {
# echo 222
# }

# function find-file {
# echo 333
# }

# function dirp {
# dir=`pwd`
# if [ ! "/" == "$DIR" ]; then
# echo "dir is "`pwd`
# else
# echo "dir is root"
# fi
# }

# dirp

# find-str "devel" ~/.bashrc
# if [ $? -eq 1 ]; then
# echo "found:"$?
# else
# echo "not-found:"$?
# fi

# function readp- {
# read -p "$1(Y/n)" c
# if [ "$c" == "y" ] || [ "$c" == "Y" ] || [ "$c" == "" ]; then
# return $(( 1 ));
# elif [ "$c" == "n" ] || [ "$c" == "N" ]; then
# return $(( 0 ));
# else
# echo "invalid input:$c"
# readp "$1"
# fi
# }
function zipapp {
    tip "zipapp"
    cd $CACHE
    zip -r apps.zip apps
    mv apps.zip $ZIP_HOME/apps.zip
    cd $ZIP_HOME
    rm -rf *.zip.*
    split -d -b 3m apps.zip apps.zip.
    sleep 1s
    rm -rf apps.zip

    cd $OME_ROOT
}

function unzipapp {
    tip "unzipapp"
    cd $ZIP_HOME
    ls
    cat *.zip.* > apps.zip
    unzip apps.zip
    sleep 1s
    rm -rf apps.zip
    mv apps ..

    cd $OME_ROOT
}

function pushapp {
    tip "pushapp"
    cd $ZIP_HOME
    zipapp
    git-push
}

function getapp {
    tip "getapp"
    if [ ! -d $APP_HOME ]; then
	if [ ! -d $ZIPHOME ]; then
	    echo pass
	fi
    fi
}

function steam-on-freebsd() {
    # home: https://github.com/SteamOnFreeBSD/SteamOnFreeBSD
    cd $HOME
    
    pkg install deb2targz rpm2cpio doas
    if [ ! -e /usr/local/etc/doas.conf ]; then
	touch /usr/local/etc/doas.conf
	echo 'permit nopass keepenv yourusername >> /usr/local/etc/doas.conf'
    fi

    if [ ! -e steam.deb ]; then		
	fetch http://media.steampowered.com/client/installer/steam.deb
    fi

    deb2targz steam.deb
    tar -zxvf steam.tar.gz -C /
    # git clone https://github.com/SteamOnFreeBSD/SteamOnFreeBSD.git
    github-upgrade SteamOnFreeBSD/SteamOnFreeBSD $HOME/SteamOnFreeBSD
    cd $HOME/SteamOnFreeBSD
    
    ./install.sh
    ./steamrun

}

function wine-upgrade() {
    sudo dpkg --add-architecture i386
    wget -nc https://dl.winehq.org/wine-builds/Release.key
    sudo apt-key add Release.key
    sudo apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/
}

function ssh-gen() {
    ssh-keygen -t rsa -C "$1"
}

function ssh-test() {
    ssh -T git@github.com
}

function ntfs-fix() {
    sudo ntfsfix /dev/sda2
}

function neofetch-upgrade() {
    # https://github.com/dylanaraps/neofetch/wiki/Installation
    sudo add-apt-repository ppa:dawidd0811/neofetch
    # sudo add-apt-repository ppa:dawidd0811/neofetch-daily
    sudo apt update
    sudo apt install neofetch
}
