#!/usr/bin/env bash

################################################################################
CURRENT_DIR=$(dirname $(readlink -f $0))
source $CURRENT_DIR/env
################################################################################

PROJECT_BLOG=demo-kwok.github.io

DIR_BLOG=$SHAMAN_ROOT/blog
DIR_WORKSPACE=$SHAMAN_ROOT/workspace
DIR_LLVM_WHERE=$SHAMAN_ROOT/dev
DIR_LLVM=$SHAMAN_ROOT/dev/llvm

################################################################################
function run-emacs {
    if [ ! -f $HOME/.emacs ]; then
		link-init-el
    fi

    emacs --debug-init
    exit
}

function run-emacs-nw {
    if [ ! -f $HOME/.emacs ]; then
		link-init-el
    fi

    emacs -nw --debug-init
}

function delete-etc {
    cd $SHAMAN_ROOT/emacs-config/modules
    rm -rf *.elc
    cd $SHAMAN_ROOT
}

function link-init-el() {
    tip "link"
    # cp -rf $SHAMAN_ROOT/emacs-config/init.el $HOME/.emacs

    bkdir=~/emacs-config-backup/`date +%Y-%m-%d@%H-%M-%S`
    mkdir -p $bkdir

    if [ -e ~/.emacs ]; then
		mv ~/.emacs $bkdir
    fi

    if [ -e ~/.emacs.d ]; then
		mv -a ~/.emacs.d $bkdir
    fi

    if [ -e ~/emacs-config ]; then
		mv ~/emacs-config $bkdir
    fi

    if [ -e ~/workspace ]; then
		mv ~/workspace $bkdir
    fi
    
    if [ -e ~/blog ]; then
		mv ~/blog $bkdir
    fi

    rm ~/.emacs
    rm ~/emacs-config
    rm ~/workspace
    rm ~/blog

    #for linux
    tip "link .emacs"
    cp -a $SHAMAN_ROOT/emacs-config/init.el ~/.emacs 
    ln -s $SHAMAN_ROOT/emacs-config ~/emacs-config
    ln -s $SHAMAN_ROOT/workspace ~/workspace
    ln -s $SHAMAN_ROOT/blog ~/blog
	
    # if [ ! -f /usr/bin/shaman ]; then
    # sudo ln -s $SHAMAN_ROOT/shaman /usr/bin/shaman
    # fi

    find-str "my-emacs-config" ~/.bashrc
    if [ $? -eq 0 ]; then
		echo "" >> ~/.bashrc
		echo "source $SHAMAN_BIN/env" >> ~/.bashrc
    fi

    # find-str "my-emacs-config" ~/.zshrc
    # if [ $? -eq 0 ]; then
		# echo "" >> ~/.zshrc
		# echo "source $SHAMAN_BIN/env" >> ~/.zshrc
    # fi

	find-str "my-emacs-config" ~/.profile
    if [ $? -eq 0 ]; then
		echo "" >> ~/.profile 
		# echo "export PATH=$SHAMAN_ROOT:$SHAMAN_BIN:\$PATH" >> ~/.profile 
		echo "source $SHAMAN_BIN/env" >> ~/.profile 
    fi
    
    # source $SHAMAN_BIN/env.sh
	
    pull-blog
}

function svn-remove-lose {
    # svn status grep "^!" awk '{print $2}' xargs svn rm
    svn st | grep '^\!' | cut -c 9- | xargs -r svn rm
	# --depth infinity
}

function svn-add-new {
    # svn status grep "^\?" awk '{print $2}' xargs svn add
    svn st | grep '^\?' | cut -c 9- | xargs -r svn add --depth infinity
}

function svn-cancel-add {
    # svn st |grep '^A' | cut -c 9- | awk '{print $2}' | xargs -r svn revert
    svn st | grep '^A' | cut -c 9- | xargs -r svn revert --depth infinity
}

function svn-commit {
    tip "check lose files"
    svn-remove-lose

    tip "check new files"
    svn-add-new

    tip "show status"
    svn status
    
    readp "auto commit?"
    if [ $? -eq 1 ]; then
		svn commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
		read -p "please enter commit message:" msg
		svn commit -m "$msg"
    fi
}

function pull {
    tip "pull"
    cd $SHAMAN_ROOT
    git reset
    git pull

	chmod +x $SHAMAN_ROOT/bin/*
}

function push {
    tip "func:push"
    cd $SHAMAN_ROOT
    git reset
    git pull
    git add .
    git status

    readp "auto commit?"
    if [ $? -eq 1 ]; then
		git commit -m `date +%Y-%m-%d@%H-%M-%S`
    else
		read -p "please enter commit message:" msg
		git commit -m "$msg"
    fi
    git push -u origin master
}

function push-a {
    tip "push-a"
    cd $SHAMAN_ROOT
    git reset
    git pull
    git add .
    git status
    # git commit -m "upgrade by "`uname -n`
    git commit -m `date +%Y-%m-%d@%H-%M-%S` # "upgrade by "`uname -n`
    git push -u origin master
}

function pull-blog {
    # cd $SHAMAN_ROOT
    # git reset
    # git pull

    tip "blog"
    if [ ! -d $DIR_BLOG ]; then
		cd $SHAMAN_ROOT
		git clone https://github.com/damon-kwok/damon-kwok.github.io.git $DIR_BLOG
    else
		cd $DIR_BLOG
		git pull
    fi

    tip "pull workspace"
    if [ ! -d $DIR_WORKSPACE ]; then
		cd $SHAMAN_ROOT
		svn co svn://www.svn999.com/guowangwei.workspace workspace
    else
		cd $DIR_WORKSPACE
		svn cleanup .
		svn up
    fi

}

function push-blog {
    tip "push-blog"
    cd $SHAMAN_ROOT/blog
    git reset
    git pull
    git add .
    git status
    git commit -m `date +%Y-%m-%d@%H-%M-%S` # "upgrade by "`uname -n`
    git push -u origin master
}

function zipapp {
    tip "zipapp"
    cd $CACHE
    zip -r apps.zip apps
    mv apps.zip $ZIP_HOME/apps.zip
    cd $ZIP_HOME
    rm -rf *.zip.*
    split -d -b 3m apps.zip apps.zip.
    sleep 1s
    rm -rf apps.zip

    cd $SHAMAN_ROOT
}

function unzipapp {
    tip "unzipapp"
    cd $ZIP_HOME
    ls
    cat *.zip.* > apps.zip
    unzip apps.zip
    sleep 1s
    rm -rf apps.zip
    mv apps ..

    cd $SHAMAN_ROOT
}

function pushapp {
    tip "pushapp"
    cd $ZIP_HOME
    zipapp
    push
}

function getapp {
    tip "getapp"
    if [ ! -d $APP_HOME ]; then
		if [ ! -d $ZIPHOME ]; then
			echo pass
		fi
    fi
}

function install-toolchain {
    tip "please choose your os:"
    echo "    1) debian/ubuntu/mint"
    echo "    2) archlinux/manjaro"
    echo "    3) fedora22+"
    echo "    4) macOS"
    echo "    5) msys2"
    echo "    -------------------------"
    echo "    r) return"

    read -p "please enter your choice:" item
    case $item in
		1)  # Debian / Ubuntu / LinuxMint
			wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb \
				&& sudo dpkg -i erlang-solutions_1.0_all.deb
			sudo apt update
			sudo apt install -y build-essential coreutils diffutils wget curl zip unzip git subversion silversearcher-ag
			sudo apt install -y python-pip perl ruby ocaml haskell-stack elixir cargo rebar openjdk-8-jdk
			sudo apt install -y ttf-bitstream-vera #zmq ghostscript

			# - Erlang 
			sudo apt-get update
			sudo apt-get install esl-erlang
			sudo apt-get install elixir

			# - Bazel---Build and test software of any size, quickly and reliably
			sudo apt -y install pkg-config zip g++ zlib1g-dev unzip python
			echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | \
				sudo tee /etc/apt/sources.list.d/bazel.list
			curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
			sudo apt-get update && sudo apt-get install -y bazel

			# - Golang LTS PPA
			sudo add-apt-repository ppa:longsleep/golang-backports
			sudo apt-get update
			sudo apt-get install golang-go			
			;;
		
		2)  # ArchLinux / Manjaro
			yaourt -Syyu
			yaourt -S base-devel coreutils diffutils wget curl zip unzip git subversion the_silver_searcher
			yaourt -S python2-pip perl rubygems ocaml haskell-stack-git elixir cargo rebar3 openjdk-8-jdk golang
			yaourt -S ttf-bitstream-vera-dummy			
			;;
		
		3)  # Fedora / Redhat / CentOS
			sudo dnf update
			sudo dnf groupinstall "Development Tools and Libraries"
			sudo dnf install coreutils diffutils wget curl zip unzip git subversion the_silver_searcher
			sudo dnf install python2-pip perl rubygems ocaml haskell-stack elixir cargo rebar3  openjdk-8-jdk golang
			sudo dnf install ttf-bitstream-vera
			;;
		
		4) # macOS
			brew update
			brew install coreutils diffutils wget curl zip unzip git subversion the_silver_searcher
			brew install python2-pip perl rubygems ocaml haskell-stack elixir cargo rebar3 openjdk-8-jdk golang
			brew install ttf-bitstream-vera
			;;
		
		5) # msys2
			pacman -Syyu
			pacman -S base-devel coreutils diffutils wget curl zip unzip git subversion camke mingw-w64-x86_64-ag
			pacman -S python2-pip perl rubygems mingw-w64-x86_64-gcc mingw-w64-x86_64-ocaml golang
			pacman -S ttf-bitstream-vera
			#mingw-w64-x86_64-zeromq mingw-w64-x86_64-ghostscript
			;;
		
		r | R)
			ask-menu
			;;
		*)
			ask-repl
			;;
    esac

	# tip "install oh-my-zsh"
	# sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

	tip "install Bash-it"
	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
	~/.bash_it/install.sh

	tip "install cquery"
	github-init cquery-project/cquery $HOME/dev/cquery
	mkdir -p $HOME/dev/cquery/build
	cd $HOME/dev/cquery/build/
	cmake .. \
		  -DCMAKE_INSTALL_PREFIX=$HOME/.cquery \
		  -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \
		  -DCMAKE_BUILD_TYPE=Release
	make install
	
	tip "install golang"
	go get -u github.com/sourcegraph/go-langserver
	
	tip "install nvm + nodejs"
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
	nvm install node
	npm i -g javascript-typescript-langserver
	npm i -g flow-language-server
	npm i -g typescript-language-server
		
    tip "install ebook build tool: sphinx-build"
    # pip install ipython jupyter rope jedi flake8 importmagic autopep8 yapf
	pip install -U sphinx
	
    #haskell
    # if [ ! -d "~/.stack/" ]; then
    # mkdir ~/.stack/
    # cp $SHAMAN_ROOT/cache/bin/config.yaml ~/.stack/
    # fi
    # stack update
    # stack upgrade

    tip "install lein + clojure"
    cd $SHAMAN_BIN
	# curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein.bat
	# curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    chmod +x ./lein
    lein upgrade
    
	# tip "install elixir + erlang-nox"	
    tip "install rebar3 for erlang"
    cd $SHAMAN_BIN
	# wget https://s3.amazonaws.com/rebar3/rebar3 && chmod +x rebar3
    chmod +x ./rebar3
    rebar3 update
    rebar3 upgrade

	tip "install cargo + rust"

	tip "install nim"
	
    tip "chmod +x shaman/bin/*"
    cd $SHAMAN_BIN
    chmod +x ./*

	tip "link .emacs"
	link-init-el
}

function ask-blog {
    echo ""
    tip "please choose your choice:"
    echo "    1) pull-blog"
    echo "    2) push-blog"
    echo "    3) commit-workspace"
    echo "    s) shell"    
    echo ------------------------------------
    echo "    r) return"

    read -p "please enter your choice:" item
    case $item in
		1) pull-blog;;
		2) push-blog;;
		3)
			# mkdir -p ~/tmp/
			# mv $DIR_WORKSPACE/catkin_ws/.git/ ~/tmp/
			# rm -rf  $DIR_WORKSPACE/catkin_ws/src/adsim/rtags_indexes
			# rm -rf $DIR_WORKSPACE/catkin_ws/build/
			# rm -rf $DIR_WORKSPACE/catkin_ws/devel/lib/
			# rm -rf $DIR_WORKSPACE/catkin_ws/devel/share/
			
			cd $DIR_WORKSPACE
			svn-commit
	    
	    # mv ~/tmp/.git/ $DIR_WORKSPACE/catkin_ws/
	    ;;
	s|S) bash;;
	r|R) ask-menu;;
	*) ask-blog;;
    esac
}

function ask-repl {
    echo ""
    tip "please choose your choice:"
    echo "    1) clojure"
    echo "    2) haskell"
    echo "    3) elixir"
    echo "    4) erlang"
    echo "    -------------------------"
    echo "    r) return"

    read -p "please enter your choice:" item
    case $item in
	1) echo abort with "^C | ^D | (exit) | (quit)" && lein repl;;
	2) echo abort with "^D :quit" && stack repl;;
	3) echo abort with "^C" && iex;;
	4) echo abort with "^C | ^G | q()." erl;;
	r | R) ask-menu;;
	*) ask-repl;;
    esac
}

function ask-menu {
    cd $SHAMAN_ROOT
    #echo "ask-menu"
    # echo "    0) ask-blog"
    echo "=============================="
    echo "    1) pull"
    echo "    2) push"
    # echo "    2) getapp"
    # echo "    3) pushapp"
    # echo "    4) zipapp"
    # echo "    5) unzipapp"
    echo "    i) install toolchain"
    echo "    g) git config"
    echo "    e) emacs"
    echo "    n) emacs-nw"
    # echo "    c) complie-elc"
    echo "    l) link init.el"
    echo "    d) delete-elc"
    echo "    --------------------------"
    echo "    r) return"
    echo "    s) shell"
    echo "    z) REPL"
    echo "    q) quit"

    read -p "please enter your choice:" item
    case $item in
	0) ask-blog;;
	1) pull;;
	2) push;;
	3) push-a;;
	# 2) getapp;;
	# 3) pushapp;;
	# 4) zipapp;;
	# 5) unzipapp;;
	i) install-toolchain;;
	g|G)
	    git config --global color.ui true
	    git config --global core.editor "ed"
	    
	    git config --global merge.tool ediff-merge
	    git config --global mergetool.diffmerge.cmd "ediff-merge \$LOCAL \$REMOTE \$BASE \$MERGED"
	    git config --global mergetool.keepBackup false

	    git config --global diff.tool ediff
	    git config --global difftool.ediff.cmd "ediff \"\$LOCAL\" \"\$REMOTE\""
	    git config --global difftool.prompt false
	    ;;
	e|E) run-emacs;;
	n|N) run-emacs-nw;;
	c|C) compile-elc;;
	l|L) link-init-el;;
	d|D) delete-elc;;
	s|S) bash;;
	z|Z) ask-repl;;
	q|Q) exit;;
	*) ask-menu;;	    
    esac
    ask-menu
}

ask-menu


echo-ask() {
    read -p $(tput setaf 5)"$1 "$(tput sgr0)
}
echo-warning-ask() {
    read -p $(tput setaf 3)"$1 "$(tput sgr0)
}
echo-success() {
    echo -e $(tput setaf 2)"$1"$(tput sgr0)
}
echo-warning() {
    echo -e $(tput setaf 3)"$1"$(tput sgr0)
}
echo-error() {
    echo -e $(tput setaf 1)"$1"$(tput sgr0)
}
echo-tip() {
    echo -e $(tput setaf 6)"$1"$(tput sgr0)
}
echo-debug() {
    echo -e $(tput setaf 8)"$1"$(tput sgr0)
}
echo-waiting() {
    echo -e $(tput setaf 4)"$1"$(tput sgr0)
}
